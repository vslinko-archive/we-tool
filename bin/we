#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var winston = require('winston');
var nomnom = require('nomnom');
var containerFactory = require('../lib/containerFactory');

var certsPath = path.join(process.env.HOME, '.boot2docker', 'certs', 'boot2docker-vm');
var container = containerFactory({
  hostname: '192.168.59.103',
  port: 2376,
  configFileName: '.we.json',
  certsPath: certsPath,
  key: fs.readFileSync(path.join(certsPath, 'key.pem')).toString(),
  cert: fs.readFileSync(path.join(certsPath, 'cert.pem')).toString(),
  ca: fs.readFileSync(path.join(certsPath, 'ca.pem')).toString()
});

nomnom.option('logLevel', {
  abbr: 'l',
  full: 'log-level',
  help: 'set logging level',
  choices: ['silly', 'debug', 'verbose', 'info', 'warning', 'error'],
  callback: function(logLevel) {
    container.logger.transports.console.level = logLevel;
  }
});

nomnom.command('init')
  .help('create new container')
  .callback(function() {
    container.cli.init();
  });

nomnom.command('start')
  .help('start container')
  .callback(function() {
    container.cli.start();
  });

nomnom.command('stop')
  .help('stop container')
  .callback(function() {
    container.cli.stop();
  });

nomnom.command('enter')
  .help('enter to container')
  .callback(function() {
    container.cli.enter();
  });

nomnom.command('proxy')
  .help('run local proxy server')
  .callback(function() {
    container.cli.proxy();
  });

nomnom.command('open')
  .help('open local proxy in browser')
  .option('application', {
    abbr: 'a',
    help: 'application to open'
  })
  .callback(function(opts) {
    container.cli.open(opts);
  });

nomnom.command('halt')
  .help('stop all containers')
  .option('keepBoot2docker', {
    abbr: 'k',
    full: 'keep-boot2docker',
    flag: true,
    help: 'keep boot2docker started if all containers are stopped'
  })
  .callback(function(opts) {
    container.cli.halt(opts);
  });

nomnom.parse();
